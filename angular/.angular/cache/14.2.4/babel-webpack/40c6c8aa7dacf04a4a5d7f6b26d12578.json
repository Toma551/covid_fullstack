{"ast":null,"code":"import { map, ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.isLoggedSubject = new ReplaySubject();\n    }\n\n    connect(username, password) {\n      let token = this.createToken(username, password);\n      let options = {\n        headers: {\n          'Authorization': token\n        }\n      };\n      return this.httpClient.get('/api/login', options).pipe(map(value => {\n        this.password = password;\n        this.username = username;\n        this.isLoggedSubject.next(true);\n        console.log(\"Connected\");\n      }));\n    }\n\n    createToken(username, password) {\n      let token = `Basic ` + btoa(`${username}:${password}`);\n      return token;\n    }\n\n    isLogged() {\n      return this.isLoggedSubject.asObservable();\n    }\n\n    getBasicAuthHeaderValue() {\n      return this.createToken(this.username, this.password);\n    }\n\n    authHasBasic() {\n      return !!this.password && !!this.username;\n    }\n\n    logout() {\n      console.log(\"Logout\");\n\n      if (this.authHasBasic()) {\n        this.password = undefined;\n        this.username = undefined;\n      }\n\n      this.isLoggedSubject.next(false);\n      this.router.navigateByUrl(\"/login\").then(console.log).catch(console.error);\n    }\n\n    getUtilisateur() {\n      return this.httpClient.get('/api/user', {});\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}