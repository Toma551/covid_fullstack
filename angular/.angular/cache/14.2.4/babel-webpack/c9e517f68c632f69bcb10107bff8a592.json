{"ast":null,"code":"import _asyncToGenerator from \"D:/Documents/Fullstack/Commun Thomas/covid_fullstack/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction InfosComponent_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.infos, \" \");\n  }\n}\n\nexport class InfosComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.word = '';\n    this.infos = '';\n    this.temps = 0;\n    this.tempsRestant = 0;\n    this.finishedTimer = false;\n  }\n\n  ngOnInit() {\n    this.info();\n  }\n\n  info() {\n    this.http.get('api/public/infos/429', {\n      observe: 'response'\n    }).subscribe({\n      next: resp => {\n        console.log(resp);\n        console.log(resp.headers.keys());\n        const nbToken = resp.headers.get('X-Rate-Limit-Remaining');\n        this.infos = `${nbToken} tokens restant`;\n      },\n      error: err => {\n        console.error(err);\n        console.log(err.headers.keys());\n        const temps = err.headers.get('x-rate-limit-retry-after-seconds');\n        console.log(\"attente : \", temps); //this.infos = `Ressayer après ${temps} secondes`;\n\n        if (this.temps > 0) {\n          this.startTimer();\n        }\n      }\n    });\n  }\n\n  startTimer() {\n    var _this = this;\n\n    const tempsInitial = this.temps;\n    this.tempsRestant = this.temps;\n    const timer$ = interval(1000);\n    const sub = timer$.subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (sec) {\n        sec = sec + 1;\n        _this.tempsRestant = tempsInitial - sec;\n        console.log(\"temps restant : \", _this.tempsRestant);\n        _this.infos = `Réessayer après ${_this.tempsRestant} secondes`;\n\n        if (_this.tempsRestant <= 0) {\n          sub.unsubscribe();\n          yield new Promise(f => setTimeout(f, 1000));\n\n          _this.router.navigate(['centers']);\n\n          _this.info();\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n}\n\nInfosComponent.ɵfac = function InfosComponent_Factory(t) {\n  return new (t || InfosComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nInfosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InfosComponent,\n  selectors: [[\"app-infos\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[4, \"ngIf\"]],\n  template: function InfosComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\")(1, \"tr\");\n      i0.ɵɵtemplate(2, InfosComponent_td_2_Template, 2, 1, \"td\", 0);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.infos);\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmZvcy5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"mappings":";AAGA,SAASA,QAAT,QAAyB,MAAzB;;;;;;;;ICIMC;IACEA;IACFA;;;;;IADEA;IAAAA;;;;ADER,OAAM,MAAOC,cAAP,CAAqB;EAEzBC,YACmBC,IADnB,EAEmBC,MAFnB,EAEiC;IADd;IACA;IAGrB,YAAO,EAAP;IACA,aAAQ,EAAR;IAGA,aAAQ,CAAR;IACA,oBAAe,CAAf;IACA,qBAAgB,KAAhB;EARO;;EAWPC,QAAQ;IACN,KAAKC,IAAL;EACD;;EAEDA,IAAI;IACF,KAAKH,IAAL,CAAUI,GAAV,CAAmB,sBAAnB,EAA2C;MAACC,OAAO,EAAE;IAAV,CAA3C,EACCC,SADD,CACW;MACTC,IAAI,EAAGC,IAAD,IAAS;QACfC,OAAO,CAACC,GAAR,CAAYF,IAAZ;QACAC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,OAAL,CAAaC,IAAb,EAAZ;QACA,MAAMC,OAAO,GAAIL,IAAI,CAACG,OAAL,CAAaP,GAAb,CAAiB,wBAAjB,CAAjB;QACA,KAAKU,KAAL,GAAa,GAAGD,OAAO,iBAAvB;MACD,CANU;MAOXE,KAAK,EAAIC,GAAD,IAAQ;QACdP,OAAO,CAACM,KAAR,CAAcC,GAAd;QACAP,OAAO,CAACC,GAAR,CAAYM,GAAG,CAACL,OAAJ,CAAYC,IAAZ,EAAZ;QACA,MAAMK,KAAK,GAAID,GAAG,CAACL,OAAJ,CAAYP,GAAZ,CAAgB,kCAAhB,CAAf;QACAK,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA2BO,KAA3B,EAJc,CAKd;;QACA,IAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;UAClB,KAAKC,UAAL;QACD;MACF;IAhBU,CADX;EAmBD;;EACDA,UAAU;IAAA;;IACR,MAAMC,YAAY,GAAG,KAAKF,KAA1B;IACA,KAAKG,YAAL,GAAoB,KAAKH,KAAzB;IACA,MAAMI,MAAM,GAAGzB,QAAQ,CAAC,IAAD,CAAvB;IAEA,MAAM0B,GAAG,GAAGD,MAAM,CAACf,SAAP;MAAA,6BAAiB,WAAOiB,GAAP,EAAc;QACzCA,GAAG,GAAGA,GAAG,GAAC,CAAV;QACA,KAAI,CAACH,YAAL,GAAoBD,YAAY,GAAGI,GAAnC;QACAd,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAiC,KAAI,CAACU,YAAtC;QACA,KAAI,CAACN,KAAL,GAAa,mBAAmB,KAAI,CAACM,YAAY,WAAjD;;QACA,IAAI,KAAI,CAACA,YAAL,IAAqB,CAAzB,EAA4B;UAC1BE,GAAG,CAACE,WAAJ;UACA,MAAM,IAAIC,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;;UACA,KAAI,CAACzB,MAAL,CAAY2B,QAAZ,CAAqB,CAAC,SAAD,CAArB;;UACA,KAAI,CAACzB,IAAL;QACD;MACF,CAXW;;MAAA;QAAA;MAAA;IAAA,IAAZ;EAYD;;AA1D0B;;;mBAAdL,gBAAcD;AAAA;;;QAAdC;EAAc+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3BpC,8BAAO,CAAP,EAAO,IAAP;MAOMA;MAGFA;;;;MAHOA;MAAAA","names":["interval","i0","InfosComponent","constructor","http","router","ngOnInit","info","get","observe","subscribe","next","resp","console","log","headers","keys","nbToken","infos","error","err","temps","startTimer","tempsInitial","tempsRestant","timer$","sub","sec","unsubscribe","Promise","f","setTimeout","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\Documents\\Fullstack\\Commun Thomas\\covid_fullstack\\angular\\src\\app\\component\\infos\\infos.component.ts","D:\\Documents\\Fullstack\\Commun Thomas\\covid_fullstack\\angular\\src\\app\\component\\infos\\infos.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { interval } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-infos',\r\n  templateUrl: './infos.component.html',\r\n  styleUrls: ['./infos.component.scss']\r\n})\r\nexport class InfosComponent implements OnInit{\r\n\r\n  constructor(\r\n    private readonly http: HttpClient, \r\n    private readonly router: Router\r\n  ) { }\r\n\r\nword = '';\r\ninfos = '';\r\n\r\nprivate sub: any;\r\ntemps = 0;\r\ntempsRestant = 0;\r\nfinishedTimer = false;\r\n\r\n\r\nngOnInit(): void {\r\n  this.info();\r\n}\r\n\r\ninfo() {\r\n  this.http.get<any>('api/public/infos/429', {observe: 'response'})\r\n  .subscribe({\r\n    next: (resp) => {\r\n    console.log(resp);\r\n    console.log(resp.headers.keys());\r\n    const nbToken =  resp.headers.get('X-Rate-Limit-Remaining')\r\n    this.infos = `${nbToken} tokens restant`\r\n  },\r\n  error:  (err) => {\r\n    console.error(err);\r\n    console.log(err.headers.keys());\r\n    const temps =  err.headers.get('x-rate-limit-retry-after-seconds')\r\n    console.log(\"attente : \",  temps);\r\n    //this.infos = `Ressayer après ${temps} secondes`;\r\n    if (this.temps > 0) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n});\r\n}\r\nstartTimer() {\r\n  const tempsInitial = this.temps;\r\n  this.tempsRestant = this.temps;\r\n  const timer$ = interval(1000);\r\n\r\n  const sub = timer$.subscribe(async (sec) => {\r\n    sec = sec+1;\r\n    this.tempsRestant = tempsInitial - sec;\r\n    console.log(\"temps restant : \",  this.tempsRestant);\r\n    this.infos = `Réessayer après ${this.tempsRestant} secondes`;\r\n    if (this.tempsRestant <= 0) {\r\n      sub.unsubscribe();\r\n      await new Promise(f => setTimeout(f, 1000));\r\n      this.router.navigate(['centers']);\r\n      this.info();\r\n    }\r\n  });\r\n}\r\n\r\n}\r\n\r\n","<table>\r\n    <!-- <tr>\r\n      <td>\r\n        <button mat-raised-button color=\"primary\" (click)=\"info()\">Infos</button>\r\n      </td>\r\n    </tr> -->\r\n    <tr>\r\n      <td *ngIf=\"infos\">\r\n        {{infos}}\r\n      </td>\r\n    </tr>\r\n  </table>"]},"metadata":{},"sourceType":"module"}